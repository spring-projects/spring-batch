name: CI/CD build

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    name: Build branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        if: ${{ github.repository != 'spring-projects/spring-batch' || github.ref_name != 'main' }}
        run: mvn -s settings.xml --batch-mode --update-snapshots verify

      - name: Build with Maven and deploy to Artifactory
        if: ${{ github.repository == 'spring-projects/spring-batch' && github.ref_name == 'main' }}
        env:
          ARTIFACTORY_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
          ARTIFACTORY_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: mvn -s settings.xml --batch-mode --update-snapshots deploy

      - name: Generate Java docs
        run: mvn javadoc:aggregate

      - name: Generate Assembly
        working-directory: spring-batch-docs
        run: mvn assembly:single

      - name: Capture project version
        run: echo PROJECT_VERSION=$(mvn help:evaluate -Dexpression=project.version --quiet -DforceStdout) >> $GITHUB_ENV

      - name: Setup SSH key
        if: ${{ github.repository == 'spring-projects/spring-batch' && github.ref_name == 'main' }}
        env:
          DOCS_SSH_KEY: ${{ secrets.DOCS_SSH_KEY }}
          DOCS_SSH_HOST_KEY: ${{ secrets.DOCS_SSH_HOST_KEY }}
        run: |
          mkdir "$HOME/.ssh"
          echo "$DOCS_SSH_KEY" > "$HOME/.ssh/key"
          chmod 600 "$HOME/.ssh/key"
          echo "$DOCS_SSH_HOST_KEY" > "$HOME/.ssh/known_hosts"

      - name: Deploy Java docs
        if: ${{ github.repository == 'spring-projects/spring-batch' && github.ref_name == 'main' }}
        env:
          DOCS_HOST: ${{ secrets.DOCS_HOST }}
          DOCS_PATH: ${{ secrets.DOCS_PATH }}
          DOCS_USERNAME: ${{ secrets.DOCS_USERNAME }}
        working-directory: spring-batch-docs/target
        run: |
          unzip spring-batch-$PROJECT_VERSION-javadocs.zip
          ssh -i $HOME/.ssh/key $DOCS_USERNAME@$DOCS_HOST "cd $DOCS_PATH && mkdir -p $PROJECT_VERSION"
          scp -i $HOME/.ssh/key -r api $DOCS_USERNAME@$DOCS_HOST:$DOCS_PATH/$PROJECT_VERSION
